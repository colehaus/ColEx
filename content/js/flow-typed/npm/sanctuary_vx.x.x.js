// flow-typed signature: b895a4d87e2103d5df4d660a5cff4948
// flow-typed version: <<STUB>>/sanctuary_v0.14.1/flow_v0.65.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'sanctuary'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'sanctuary' {
  declare export function create({checkTypes: boolean, env: *}): S
  declare export var env: *
}

declare class Maybe<A> {
}

type S = {
  init<A>(as: Array<A>): Maybe<Array<A>>,
  head<A>(as: Array<A>): Maybe<A>,
  tail<A>(as: Array<A>): Maybe<Array<A>>,
  equals<A>(a: A): A => boolean,
  on<A, B, C>(f: (A => A => B)): (C => A) => C => C => B,
  groupBy<A>(f: (A => A => boolean)):  Array<A> => Array<Array<A>>,
  max(number): number => number,
  maybe<A, B>(b: B): (A => B) => Maybe<A> => B,
  maybe_<A, B>(b: () => B): (A => B) => Maybe<A> => B,
  toMaybe<A>(a: ?A):  Maybe<A>,
  maybeToNullable<A>(a: Maybe<A>): ?A,
  reduce<A, B>(f: (B => A => B)): B => Array<A> => B,
  joinWith(s: string): Array<string> => string,
  keys<A>(m: { [string]: A }): Array<string>,
  fromPairs<A>(ps: Array<[string, A]>): { [string]: A },
  range(low: number, high: number): Array<number>
} & {
  map<A, B>(f: A => B): Array<A> => Array<B>
} & {
  map<A, B>(f: A => B): Maybe<A> => Maybe<B>
} & {
  pipe<A, B, C>([A => B, B => C]): A => C
} & {
  pipe<A, B, C, D>([A => B, B => C, C => D]): A => D
} & {
  pipe<A, B, C, D, E>([A => B, B => C, C => D, D => E]): A => E
} & {
  join<A>(a: Array<Array<A>>): Array<A>
}
